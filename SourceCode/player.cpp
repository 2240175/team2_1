#include "all.h"
#include<iostream>

int     player_state;

//---------
// 弾の初期値
//---------
float kunaiX = 1280 / 2;
float kunaiY = -3.0;



//******************************************************************************
// TODO:03 OBJ2D型の変数playerを宣言
//------------------------------------------------------------------------------
/*
課題）
    下記でOBJ2D型の変数playerを宣言しましょう。
*/
//******************************************************************************

//TODO_03
struct OBJ2D player;

Sprite* sprPlayer;

//--------------------------------------
//  プレイヤーの初期設定
//--------------------------------------
void player_init()
{
#if 5
//******************************************************************************
// TODO:05 プレイヤーの初期設定
//------------------------------------------------------------------------------
/*
課題）
    player_stateに0を設定しましょう。
*/
//******************************************************************************
#endif
    //TODO_05
    player_state = 0;
}

//--------------------------------------
//  プレイヤーの終了処理
//--------------------------------------
void player_deinit()
{
#if 6
//******************************************************************************
// TODO:06 プレイヤーの終了処理
//------------------------------------------------------------------------------
/*
課題）
    下記でsprPlayerを破棄しましょう。
*/
//******************************************************************************
#endif
    //TODO_06
    safe_delete(sprPlayer);
}

//--------------------------------------
//  プレイヤーの更新処理
//--------------------------------------
void player_update()
{
    switch (player_state)
    {
    case 0:
        //////// 初期設定 ////////
#if 7
//******************************************************************************
// TODO:07 プレイヤーの画像を読み込む
//------------------------------------------------------------------------------
/*
課題）
    下記でplayerの画像を読み込みましょう。

    変数名：sprPlayer
    画像名：stickman.png
*/
//******************************************************************************
#endif
        //TODO_07
        sprPlayer = sprite_load(L"./Data/Images/kunai1.png");

        ++player_state;
        /*fallthrough*/

    case 1:
        //////// パラメータの設定 ////////

#if 8
//******************************************************************************
// TODO:08 プレイヤーのパラメータの設定
//------------------------------------------------------------------------------
/*
課題）
    下記でplayerの初期設定をしていきましょう。[プリント参照]

手順）
    player = {};と記述して、全て0でクリアする
    プレイヤーのタイマー 0（一応）
    位置　　　           画面の中央
    スケール　           等倍
    画像位置　           今回は0, 0固定（一応）
    画像サイズ           TODO_04で定義したサイズ
    基準点　　           TODO_04で定義した基準点
    色　　　　           好きな色（自分で決めよう）
*/
//******************************************************************************
#endif
        //TODO_08
        player = {};
        player.timer = 0;
        player.pos = { SCREEN_W / 2.0f,SCREEN_H / 2.0f };
        player.scale = { 1.0f,1.0f };
        player.texPos = { 0,0 };
        player.texSize = { PLAYER_TEX_W,PLAYER_TEX_H };
        player.pivot = {PLAYER_PIVOT_X,PLAYER_PIVOT_Y};
        player.color = {0.0f,5.0f,0.0f,1.0f};



        ++player_state;
        /*fallthrough*/

    case 2:
        //////// 通常時 ////////

//******************************************************************************
// TODO:16 Y方向・X方向の移動関数を呼ぶ
//------------------------------------------------------------------------------



        //TODO_16 Y方向・X方向の移動関数を呼び、1フレームあたりの速度を求める
       

        //予備課題：ジャンプ処理



        //TODO_18 位置に速度を足す
        player.pos += player.speed;

#if 20
//******************************************************************************
// TODO:20 地面とのあたり判定（仮）
//------------------------------------------------------------------------------
/*
課題）
    プレイヤーのy座標がGROUND_Yを超えている場合、プレイヤーのy座標にGROUND_Yを
    代入し、超えないようにしましょう。また、その際にY方向の速度に0.0fを代入して
    おきましょう。
*/
//******************************************************************************
#endif
        //TODO_20 地面とのあたり判定（仮）
        if (player.pos.y > GROUND_Y) {//地面にめり込んだ場合
            player.pos.y = GROUND_Y;//地面に立たせる
            player.speed.y = 0.0f; //着地したので、yの速度を０にして止める

        }

#if 24
//******************************************************************************
// TODO:24 プレイヤーの左右のエリアチェック
//------------------------------------------------------------------------------
/*
課題）
    プレイヤーが画面からはみ出ないようにしましょう。

    プレイヤーのX座標の最小値：PLAYER_TEX_W * 0.5f
    プレイヤーのX座標の最大値：SCREEN_W - PLAYER_TEX_W * 0.5f

    ※左右の限界値をplayer.hに、定数として定義してみましょう。
*/
//******************************************************************************
#endif
        //TODO_24 プレイヤーの左右のエリアチェック
        if (player.pos.x < PLAYER_LIMIT_L)//画面左端より消えそうなとき
        {
            player.pos.x = PLAYER_LIMIT_L; //左端でストップ
        }
        if (player.pos.x > PLAYER_LIMIT_R)//画面左端より消えそうなとき
        {
            player.pos.x = PLAYER_LIMIT_R; //左端でストップ
        }


        break;
    }
}

void player_render()
{
#if 9
//******************************************************************************
// TODO:09 プレイヤーの描画
//------------------------------------------------------------------------------
/*
課題）
    下記でsprPlayerを描画しましょう。

解説）
    他に必要なパラメータは基本的にOBJ2D構造体のメンバ変数になっています。OBJ2D型の
    playerのメンバ変数を記述していきましょう。角度のみ、ToRadian(0)でOKです。
    色はVECTOR4型です。VECTOR4型の中身はx, y, z, wです。色はr, g, b, aなので、
    その順番で対応しています。（例えばrはxで、aはwで表すなど）
*/
//******************************************************************************
#endif
    //TODO_09
    sprite_render(
        sprPlayer,
        player.pos.x, player.pos.y,
        player.scale.x, player.scale.y,
        player.texPos.x, player.texPos.y,
        player.texSize.x, player.texSize.y,
        player.pivot.x, player.pivot.y,
        ToRadian(0),
        player.color.x, player.color.y, player.color.z, player.color.w);
}

void player_moveY()
{

    //TODO_17
    player.speed.y += GRAVITY;
}

